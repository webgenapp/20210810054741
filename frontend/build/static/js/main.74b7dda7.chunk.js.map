{"version":3,"sources":["api.ts","coffees/CoffeeForm.tsx","coffees/CreateCoffee.tsx","coffees/ListCoffee.tsx","coffees/DetailCoffee.tsx","coffees/UpdateCoffee.tsx","fruits/FruitForm.tsx","fruits/CreateFruit.tsx","fruits/ListFruit.tsx","fruits/DetailFruit.tsx","fruits/UpdateFruit.tsx","icecreams/IcecreamForm.tsx","icecreams/CreateIcecream.tsx","icecreams/ListIcecream.tsx","icecreams/DetailIcecream.tsx","icecreams/UpdateIcecream.tsx","users/UserForm.tsx","users/CreateUser.tsx","users/ListUser.tsx","users/DetailUser.tsx","users/UpdateUser.tsx","auth/LoginForm.tsx","auth/RegisterForm.tsx","App.tsx","index.tsx"],"names":["CSRF_TOKEN_NAME","CSRF_HEADER_NAME","cookie","name","document","split","find","entry","client","axios","create","headers","value","reduce","CoffeeForm","coffee","onSubmit","initialValues","flavour","surname","type","validate","isSubmitting","placeholder","disabled","CreateCoffee","queryClient","useQueryClient","history","useHistory","createCoffee","useMutation","values","post","onSuccess","invalidateQueries","setSubmitting","mutate","push","CoffeePreview","handleEdit","handleDelete","handleDetail","onClick","ListCoffees","coffeesQuery","useQuery","get","then","response","data","deleteCoffee","id","delete","length","map","DetailCoffee","useParams","isLoading","UpdateCoffee","updateCoffee","put","FruitForm","fruit","amount","sugar","fresh","CreateFruit","createFruit","FruitPreview","ListFruits","fruitsQuery","deleteFruit","DetailFruit","UpdateFruit","updateFruit","IcecreamForm","icecream","quantity","CreateIcecream","createIcecream","IcecreamPreview","ListIcecreams","icecreamsQuery","deleteIcecream","DetailIcecream","UpdateIcecream","updateIcecream","UserForm","user","username","passwordHash","CreateUser","createUser","UserPreview","ListUsers","usersQuery","deleteUser","DetailUser","UpdateUser","updateUser","Login","useState","error","setError","handleError","message","handleSubmit","a","password","Register","api","email","passwordConfirm","App","retry","useEffect","defaults","catch","console","warn","className","to","path","component","ListCoffee","ListFruit","ListIcecream","ListUser","LoginForm","RegisterForm","QueryClient","ReactDOM","render","StrictMode","QueryClientProvider","getElementById"],"mappings":"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","file":"static/js/main.74b7dda7.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst CSRF_TOKEN_NAME = 'csrf-token'\nconst CSRF_HEADER_NAME = 'CSRF-Token'\n\n/**\n * cookie\n * Returns the value of the first cookie matching name `name`\n * or undefined.\n */\nexport function cookie(name: string): string | undefined {\n  // Inspired from\n  // https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie#example_2_get_a_sample_cookie_named_test2\n  return document.cookie\n    .split('; ')\n    .find((entry) => entry?.split('=')[0] === name)\n    ?.split('=')[1]\n}\n\nexport function hasCSRFToken() {\n  return cookie(CSRF_TOKEN_NAME)\n}\n\nexport function fetchCSRFToken() {\n  client\n    .get('/auth/csrf')\n    .then(() => {\n      client.defaults.headers[CSRF_HEADER_NAME] = cookie(CSRF_TOKEN_NAME)\n    })\n    .catch((error) => {\n      console.warn('Received error while fetching CSRF token :', error)\n    })\n}\n\ntype HeaderEntry = {\n  [name: string]: string\n}\n\nconst client = axios.create({\n  headers: [\n    {\n      name: CSRF_HEADER_NAME,\n      value: cookie(CSRF_TOKEN_NAME),\n    },\n  ].reduce<HeaderEntry>((headers, entry) => {\n    if (entry.value) {\n      headers[entry.name] = entry.value\n    }\n    return headers\n  }, {}),\n})\n\nexport default client\n","import React from 'react'\nimport { Formik, Field, Form, FormikHelpers } from 'formik'\nimport { Coffee } from '../types'\n\ntype CreateProps = {\n  coffee?: Coffee\n  onSubmit: (values: Coffee, helpers: FormikHelpers<Coffee>) => void\n}\n\nfunction CoffeeForm({ coffee, onSubmit }: CreateProps) {\n  const initialValues: Coffee = {\n    flavour: coffee ? coffee.flavour : '',\n    surname: coffee ? coffee.surname : '',\n    type: coffee ? coffee.type : '',\n  }\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validate={() => {\n        return {}\n      }}\n      onSubmit={onSubmit}\n    >\n      {({ isSubmitting }) => (\n        <Form>\n          <Field type='text' name='flavour' placeholder='Flavour' />\n\n          <Field type='text' name='surname' placeholder='Surname' />\n\n          <Field type='text' name='type' placeholder='Type' />\n\n          <button type='submit' disabled={isSubmitting}>\n            Submit\n          </button>\n        </Form>\n      )}\n    </Formik>\n  )\n}\n\nexport default CoffeeForm\n","import client from '../api'\nimport { FormikHelpers } from 'formik'\nimport React from 'react'\nimport { useMutation, useQueryClient } from 'react-query'\nimport { Coffee, CoffeeError } from '../types'\nimport CoffeeForm from './CoffeeForm'\nimport { useHistory } from 'react-router-dom'\n\nfunction CreateCoffee() {\n  const queryClient = useQueryClient()\n  const history = useHistory()\n  const createCoffee = useMutation<Coffee, CoffeeError, Coffee>(\n    (values) => {\n      return client.post('/api/v1/coffees', values)\n    },\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries('coffees')\n      },\n    }\n  )\n\n  const handleSubmit = (\n    values: Coffee,\n    { setSubmitting }: FormikHelpers<Coffee>\n  ) => {\n    createCoffee.mutate(values)\n    setSubmitting?.(false)\n    history.push('/coffees')\n  }\n\n  return <CoffeeForm onSubmit={handleSubmit} />\n}\n\nexport default CreateCoffee\n","import React from 'react'\nimport { useQueryClient, useQuery, useMutation } from 'react-query'\nimport client from '../api'\nimport { Coffee } from '../types'\nimport { useHistory } from 'react-router-dom'\n\ntype CoffeePreviewProps = {\n  coffee: Coffee\n  handleEdit: (coffee: Coffee) => void\n  handleDelete: (coffee: Coffee) => void\n  handleDetail: (coffee: Coffee) => void\n}\n\nfunction CoffeePreview({\n  coffee,\n  handleEdit,\n  handleDelete,\n  handleDetail,\n}: CoffeePreviewProps) {\n  return (\n    <>\n      {coffee.flavour}\n      <br />\n      <button type='button' onClick={() => handleDetail(coffee)}>\n        detail\n      </button>\n      <button type='button' onClick={() => handleEdit(coffee)}>\n        edit\n      </button>\n      <button type='button' onClick={() => handleDelete(coffee)}>\n        delete\n      </button>\n    </>\n  )\n}\n\nfunction ListCoffees() {\n  const history = useHistory()\n  const queryClient = useQueryClient() // eslint-disable-line no-unused-vars\n  const coffeesQuery = useQuery<Coffee[]>('coffees', () => {\n    return client\n      .get('/api/v1/coffees')\n      .then((response) => response.data) as Promise<Coffee[]>\n  })\n\n  const deleteCoffee = useMutation<any, any, Partial<Coffee>>(\n    ({ id }) => {\n      return client.delete(`/api/v1/coffees/${id}`)\n    },\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries('coffees')\n      },\n    }\n  )\n\n  const handleEdit = ({ id }: Coffee) => {\n    history.push(`/coffees/update/${id}`)\n  }\n\n  const handleDelete = ({ id }: Coffee) => {\n    deleteCoffee.mutate({ id })\n  }\n\n  const handleDetail = ({ id }: Coffee) => {\n    history.push(`/coffees/detail/${id}`)\n  }\n\n  return (\n    <>\n      <p>{coffeesQuery.data?.length} coffees</p>\n      <ul>\n        {coffeesQuery.data?.map((coffee) => (\n          <li key={coffee.id}>\n            <CoffeePreview\n              coffee={coffee}\n              handleDelete={handleDelete}\n              handleEdit={handleEdit}\n              handleDetail={handleDetail}\n            />\n          </li>\n        ))}\n      </ul>\n    </>\n  )\n}\n\nexport default ListCoffees\n","import React from 'react'\nimport { useParams } from 'react-router-dom'\nimport client from '../api'\nimport { useQuery } from 'react-query'\nimport { Coffee } from '../types'\n\nfunction DetailCoffee() {\n  const { id } = useParams<{ id: string }>()\n\n  const { data, isLoading } = useQuery<Coffee>(['coffees', id], () =>\n    client.get(`/api/v1/coffees/${id}`).then((response) => response.data)\n  )\n\n  if (isLoading) {\n    return <div>Loading...</div>\n  }\n\n  const coffee = data as Coffee\n\n  return (\n    <div>\n      <label>{coffee.flavour}</label>\n      <br />\n\n      <label>{coffee.surname}</label>\n      <br />\n\n      <label>{coffee.type}</label>\n      <br />\n    </div>\n  )\n}\n\nexport default DetailCoffee\n","import client from '../api'\nimport React from 'react'\nimport { useParams, useHistory } from 'react-router-dom'\nimport CoffeeForm from './CoffeeForm'\nimport { Coffee } from '../types'\nimport { useQuery, useMutation, useQueryClient } from 'react-query'\n\nfunction UpdateCoffee() {\n  const { id } = useParams<{ id: string }>()\n  const queryClient = useQueryClient()\n  const history = useHistory()\n\n  const { data, isLoading } = useQuery<Coffee>(['coffees', id], () =>\n    client.get(`/api/v1/coffees/${id}`).then((response) => response.data)\n  )\n\n  const updateCoffee = useMutation<Coffee, any, Coffee>(\n    (values: Coffee) =>\n      client\n        .put(`/api/v1/coffees/${id}`, values)\n        .then((response) => response.data),\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries('coffees')\n      },\n    }\n  )\n\n  if (isLoading) {\n    return <div>Loading...</div>\n  }\n\n  const coffee = data as Coffee\n  return (\n    <CoffeeForm\n      coffee={coffee}\n      onSubmit={(values, { setSubmitting }) => {\n        updateCoffee.mutate(values)\n        setSubmitting?.(false)\n        history.push('/coffees')\n      }}\n    />\n  )\n}\n\nexport default UpdateCoffee\n","import React from 'react'\nimport { Formik, Field, Form, FormikHelpers } from 'formik'\nimport { Fruit } from '../types'\n\ntype CreateProps = {\n  fruit?: Fruit\n  onSubmit: (values: Fruit, helpers: FormikHelpers<Fruit>) => void\n}\n\nfunction FruitForm({ fruit, onSubmit }: CreateProps) {\n  const initialValues: Fruit = {\n    amount: fruit ? fruit.amount : '',\n    sugar: fruit ? fruit.sugar : '',\n    fresh: fruit ? fruit.fresh : '',\n  }\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validate={() => {\n        return {}\n      }}\n      onSubmit={onSubmit}\n    >\n      {({ isSubmitting }) => (\n        <Form>\n          <Field type='text' name='amount' placeholder='Amount' />\n\n          <Field type='text' name='sugar' placeholder='Sugar' />\n\n          <Field type='text' name='fresh' placeholder='Fresh' />\n\n          <button type='submit' disabled={isSubmitting}>\n            Submit\n          </button>\n        </Form>\n      )}\n    </Formik>\n  )\n}\n\nexport default FruitForm\n","import client from '../api'\nimport { FormikHelpers } from 'formik'\nimport React from 'react'\nimport { useMutation, useQueryClient } from 'react-query'\nimport { Fruit, FruitError } from '../types'\nimport FruitForm from './FruitForm'\nimport { useHistory } from 'react-router-dom'\n\nfunction CreateFruit() {\n  const queryClient = useQueryClient()\n  const history = useHistory()\n  const createFruit = useMutation<Fruit, FruitError, Fruit>(\n    (values) => {\n      return client.post('/api/v1/fruits', values)\n    },\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries('fruits')\n      },\n    }\n  )\n\n  const handleSubmit = (\n    values: Fruit,\n    { setSubmitting }: FormikHelpers<Fruit>\n  ) => {\n    createFruit.mutate(values)\n    setSubmitting?.(false)\n    history.push('/fruits')\n  }\n\n  return <FruitForm onSubmit={handleSubmit} />\n}\n\nexport default CreateFruit\n","import React from 'react'\nimport { useQueryClient, useQuery, useMutation } from 'react-query'\nimport client from '../api'\nimport { Fruit } from '../types'\nimport { useHistory } from 'react-router-dom'\n\ntype FruitPreviewProps = {\n  fruit: Fruit\n  handleEdit: (fruit: Fruit) => void\n  handleDelete: (fruit: Fruit) => void\n  handleDetail: (fruit: Fruit) => void\n}\n\nfunction FruitPreview({\n  fruit,\n  handleEdit,\n  handleDelete,\n  handleDetail,\n}: FruitPreviewProps) {\n  return (\n    <>\n      {fruit.amount}\n      <br />\n      <button type='button' onClick={() => handleDetail(fruit)}>\n        detail\n      </button>\n      <button type='button' onClick={() => handleEdit(fruit)}>\n        edit\n      </button>\n      <button type='button' onClick={() => handleDelete(fruit)}>\n        delete\n      </button>\n    </>\n  )\n}\n\nfunction ListFruits() {\n  const history = useHistory()\n  const queryClient = useQueryClient() // eslint-disable-line no-unused-vars\n  const fruitsQuery = useQuery<Fruit[]>('fruits', () => {\n    return client\n      .get('/api/v1/fruits')\n      .then((response) => response.data) as Promise<Fruit[]>\n  })\n\n  const deleteFruit = useMutation<any, any, Partial<Fruit>>(\n    ({ id }) => {\n      return client.delete(`/api/v1/fruits/${id}`)\n    },\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries('fruits')\n      },\n    }\n  )\n\n  const handleEdit = ({ id }: Fruit) => {\n    history.push(`/fruits/update/${id}`)\n  }\n\n  const handleDelete = ({ id }: Fruit) => {\n    deleteFruit.mutate({ id })\n  }\n\n  const handleDetail = ({ id }: Fruit) => {\n    history.push(`/fruits/detail/${id}`)\n  }\n\n  return (\n    <>\n      <p>{fruitsQuery.data?.length} fruits</p>\n      <ul>\n        {fruitsQuery.data?.map((fruit) => (\n          <li key={fruit.id}>\n            <FruitPreview\n              fruit={fruit}\n              handleDelete={handleDelete}\n              handleEdit={handleEdit}\n              handleDetail={handleDetail}\n            />\n          </li>\n        ))}\n      </ul>\n    </>\n  )\n}\n\nexport default ListFruits\n","import React from 'react'\nimport { useParams } from 'react-router-dom'\nimport client from '../api'\nimport { useQuery } from 'react-query'\nimport { Fruit } from '../types'\n\nfunction DetailFruit() {\n  const { id } = useParams<{ id: string }>()\n\n  const { data, isLoading } = useQuery<Fruit>(['fruits', id], () =>\n    client.get(`/api/v1/fruits/${id}`).then((response) => response.data)\n  )\n\n  if (isLoading) {\n    return <div>Loading...</div>\n  }\n\n  const fruit = data as Fruit\n\n  return (\n    <div>\n      <label>{fruit.amount}</label>\n      <br />\n\n      <label>{fruit.sugar}</label>\n      <br />\n\n      <label>{fruit.fresh}</label>\n      <br />\n    </div>\n  )\n}\n\nexport default DetailFruit\n","import client from '../api'\nimport React from 'react'\nimport { useParams, useHistory } from 'react-router-dom'\nimport FruitForm from './FruitForm'\nimport { Fruit } from '../types'\nimport { useQuery, useMutation, useQueryClient } from 'react-query'\n\nfunction UpdateFruit() {\n  const { id } = useParams<{ id: string }>()\n  const queryClient = useQueryClient()\n  const history = useHistory()\n\n  const { data, isLoading } = useQuery<Fruit>(['fruits', id], () =>\n    client.get(`/api/v1/fruits/${id}`).then((response) => response.data)\n  )\n\n  const updateFruit = useMutation<Fruit, any, Fruit>(\n    (values: Fruit) =>\n      client\n        .put(`/api/v1/fruits/${id}`, values)\n        .then((response) => response.data),\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries('fruits')\n      },\n    }\n  )\n\n  if (isLoading) {\n    return <div>Loading...</div>\n  }\n\n  const fruit = data as Fruit\n  return (\n    <FruitForm\n      fruit={fruit}\n      onSubmit={(values, { setSubmitting }) => {\n        updateFruit.mutate(values)\n        setSubmitting?.(false)\n        history.push('/fruits')\n      }}\n    />\n  )\n}\n\nexport default UpdateFruit\n","import React from 'react'\nimport { Formik, Field, Form, FormikHelpers } from 'formik'\nimport { Icecream } from '../types'\n\ntype CreateProps = {\n  icecream?: Icecream\n  onSubmit: (values: Icecream, helpers: FormikHelpers<Icecream>) => void\n}\n\nfunction IcecreamForm({ icecream, onSubmit }: CreateProps) {\n  const initialValues: Icecream = {\n    flavour: icecream ? icecream.flavour : '',\n    quantity: icecream ? icecream.quantity : '',\n  }\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validate={() => {\n        return {}\n      }}\n      onSubmit={onSubmit}\n    >\n      {({ isSubmitting }) => (\n        <Form>\n          <Field type='text' name='flavour' placeholder='Flavour' />\n\n          <Field type='text' name='quantity' placeholder='Quantity' />\n\n          <button type='submit' disabled={isSubmitting}>\n            Submit\n          </button>\n        </Form>\n      )}\n    </Formik>\n  )\n}\n\nexport default IcecreamForm\n","import client from '../api'\nimport { FormikHelpers } from 'formik'\nimport React from 'react'\nimport { useMutation, useQueryClient } from 'react-query'\nimport { Icecream, IcecreamError } from '../types'\nimport IcecreamForm from './IcecreamForm'\nimport { useHistory } from 'react-router-dom'\n\nfunction CreateIcecream() {\n  const queryClient = useQueryClient()\n  const history = useHistory()\n  const createIcecream = useMutation<Icecream, IcecreamError, Icecream>(\n    (values) => {\n      return client.post('/api/v1/icecreams', values)\n    },\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries('icecreams')\n      },\n    }\n  )\n\n  const handleSubmit = (\n    values: Icecream,\n    { setSubmitting }: FormikHelpers<Icecream>\n  ) => {\n    createIcecream.mutate(values)\n    setSubmitting?.(false)\n    history.push('/icecreams')\n  }\n\n  return <IcecreamForm onSubmit={handleSubmit} />\n}\n\nexport default CreateIcecream\n","import React from 'react'\nimport { useQueryClient, useQuery, useMutation } from 'react-query'\nimport client from '../api'\nimport { Icecream } from '../types'\nimport { useHistory } from 'react-router-dom'\n\ntype IcecreamPreviewProps = {\n  icecream: Icecream\n  handleEdit: (icecream: Icecream) => void\n  handleDelete: (icecream: Icecream) => void\n  handleDetail: (icecream: Icecream) => void\n}\n\nfunction IcecreamPreview({\n  icecream,\n  handleEdit,\n  handleDelete,\n  handleDetail,\n}: IcecreamPreviewProps) {\n  return (\n    <>\n      {icecream.flavour}\n      <br />\n      <button type='button' onClick={() => handleDetail(icecream)}>\n        detail\n      </button>\n      <button type='button' onClick={() => handleEdit(icecream)}>\n        edit\n      </button>\n      <button type='button' onClick={() => handleDelete(icecream)}>\n        delete\n      </button>\n    </>\n  )\n}\n\nfunction ListIcecreams() {\n  const history = useHistory()\n  const queryClient = useQueryClient() // eslint-disable-line no-unused-vars\n  const icecreamsQuery = useQuery<Icecream[]>('icecreams', () => {\n    return client\n      .get('/api/v1/icecreams')\n      .then((response) => response.data) as Promise<Icecream[]>\n  })\n\n  const deleteIcecream = useMutation<any, any, Partial<Icecream>>(\n    ({ id }) => {\n      return client.delete(`/api/v1/icecreams/${id}`)\n    },\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries('icecreams')\n      },\n    }\n  )\n\n  const handleEdit = ({ id }: Icecream) => {\n    history.push(`/icecreams/update/${id}`)\n  }\n\n  const handleDelete = ({ id }: Icecream) => {\n    deleteIcecream.mutate({ id })\n  }\n\n  const handleDetail = ({ id }: Icecream) => {\n    history.push(`/icecreams/detail/${id}`)\n  }\n\n  return (\n    <>\n      <p>{icecreamsQuery.data?.length} icecreams</p>\n      <ul>\n        {icecreamsQuery.data?.map((icecream) => (\n          <li key={icecream.id}>\n            <IcecreamPreview\n              icecream={icecream}\n              handleDelete={handleDelete}\n              handleEdit={handleEdit}\n              handleDetail={handleDetail}\n            />\n          </li>\n        ))}\n      </ul>\n    </>\n  )\n}\n\nexport default ListIcecreams\n","import React from 'react'\nimport { useParams } from 'react-router-dom'\nimport client from '../api'\nimport { useQuery } from 'react-query'\nimport { Icecream } from '../types'\n\nfunction DetailIcecream() {\n  const { id } = useParams<{ id: string }>()\n\n  const { data, isLoading } = useQuery<Icecream>(['icecreams', id], () =>\n    client.get(`/api/v1/icecreams/${id}`).then((response) => response.data)\n  )\n\n  if (isLoading) {\n    return <div>Loading...</div>\n  }\n\n  const icecream = data as Icecream\n\n  return (\n    <div>\n      <label>{icecream.flavour}</label>\n      <br />\n\n      <label>{icecream.quantity}</label>\n      <br />\n    </div>\n  )\n}\n\nexport default DetailIcecream\n","import client from '../api'\nimport React from 'react'\nimport { useParams, useHistory } from 'react-router-dom'\nimport IcecreamForm from './IcecreamForm'\nimport { Icecream } from '../types'\nimport { useQuery, useMutation, useQueryClient } from 'react-query'\n\nfunction UpdateIcecream() {\n  const { id } = useParams<{ id: string }>()\n  const queryClient = useQueryClient()\n  const history = useHistory()\n\n  const { data, isLoading } = useQuery<Icecream>(['icecreams', id], () =>\n    client.get(`/api/v1/icecreams/${id}`).then((response) => response.data)\n  )\n\n  const updateIcecream = useMutation<Icecream, any, Icecream>(\n    (values: Icecream) =>\n      client\n        .put(`/api/v1/icecreams/${id}`, values)\n        .then((response) => response.data),\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries('icecreams')\n      },\n    }\n  )\n\n  if (isLoading) {\n    return <div>Loading...</div>\n  }\n\n  const icecream = data as Icecream\n  return (\n    <IcecreamForm\n      icecream={icecream}\n      onSubmit={(values, { setSubmitting }) => {\n        updateIcecream.mutate(values)\n        setSubmitting?.(false)\n        history.push('/icecreams')\n      }}\n    />\n  )\n}\n\nexport default UpdateIcecream\n","import React from 'react'\nimport { Formik, Field, Form, FormikHelpers } from 'formik'\nimport { User } from '../types'\n\ntype CreateProps = {\n  user?: User\n  onSubmit: (values: User, helpers: FormikHelpers<User>) => void\n}\n\nfunction UserForm({ user, onSubmit }: CreateProps) {\n  const initialValues: User = {\n    username: user ? user.username : '',\n    passwordHash: user ? user.passwordHash : '',\n  }\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validate={() => {\n        return {}\n      }}\n      onSubmit={onSubmit}\n    >\n      {({ isSubmitting }) => (\n        <Form>\n          <Field type='text' name='username' placeholder='Username' />\n\n          <Field type='text' name='passwordHash' placeholder='PasswordHash' />\n\n          <button type='submit' disabled={isSubmitting}>\n            Submit\n          </button>\n        </Form>\n      )}\n    </Formik>\n  )\n}\n\nexport default UserForm\n","import client from '../api'\nimport { FormikHelpers } from 'formik'\nimport React from 'react'\nimport { useMutation, useQueryClient } from 'react-query'\nimport { User, UserError } from '../types'\nimport UserForm from './UserForm'\nimport { useHistory } from 'react-router-dom'\n\nfunction CreateUser() {\n  const queryClient = useQueryClient()\n  const history = useHistory()\n  const createUser = useMutation<User, UserError, User>(\n    (values) => {\n      return client.post('/api/v1/users', values)\n    },\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries('users')\n      },\n    }\n  )\n\n  const handleSubmit = (\n    values: User,\n    { setSubmitting }: FormikHelpers<User>\n  ) => {\n    createUser.mutate(values)\n    setSubmitting?.(false)\n    history.push('/users')\n  }\n\n  return <UserForm onSubmit={handleSubmit} />\n}\n\nexport default CreateUser\n","import React from 'react'\nimport { useQueryClient, useQuery, useMutation } from 'react-query'\nimport client from '../api'\nimport { User } from '../types'\nimport { useHistory } from 'react-router-dom'\n\ntype UserPreviewProps = {\n  user: User\n  handleEdit: (user: User) => void\n  handleDelete: (user: User) => void\n  handleDetail: (user: User) => void\n}\n\nfunction UserPreview({\n  user,\n  handleEdit,\n  handleDelete,\n  handleDetail,\n}: UserPreviewProps) {\n  return (\n    <>\n      {user.username}\n      <br />\n      <button type='button' onClick={() => handleDetail(user)}>\n        detail\n      </button>\n      <button type='button' onClick={() => handleEdit(user)}>\n        edit\n      </button>\n      <button type='button' onClick={() => handleDelete(user)}>\n        delete\n      </button>\n    </>\n  )\n}\n\nfunction ListUsers() {\n  const history = useHistory()\n  const queryClient = useQueryClient() // eslint-disable-line no-unused-vars\n  const usersQuery = useQuery<User[]>('users', () => {\n    return client\n      .get('/api/v1/users')\n      .then((response) => response.data) as Promise<User[]>\n  })\n\n  const deleteUser = useMutation<any, any, Partial<User>>(\n    ({ id }) => {\n      return client.delete(`/api/v1/users/${id}`)\n    },\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries('users')\n      },\n    }\n  )\n\n  const handleEdit = ({ id }: User) => {\n    history.push(`/users/update/${id}`)\n  }\n\n  const handleDelete = ({ id }: User) => {\n    deleteUser.mutate({ id })\n  }\n\n  const handleDetail = ({ id }: User) => {\n    history.push(`/users/detail/${id}`)\n  }\n\n  return (\n    <>\n      <p>{usersQuery.data?.length} users</p>\n      <ul>\n        {usersQuery.data?.map((user) => (\n          <li key={user.id}>\n            <UserPreview\n              user={user}\n              handleDelete={handleDelete}\n              handleEdit={handleEdit}\n              handleDetail={handleDetail}\n            />\n          </li>\n        ))}\n      </ul>\n    </>\n  )\n}\n\nexport default ListUsers\n","import React from 'react'\nimport { useParams } from 'react-router-dom'\nimport client from '../api'\nimport { useQuery } from 'react-query'\nimport { User } from '../types'\n\nfunction DetailUser() {\n  const { id } = useParams<{ id: string }>()\n\n  const { data, isLoading } = useQuery<User>(['users', id], () =>\n    client.get(`/api/v1/users/${id}`).then((response) => response.data)\n  )\n\n  if (isLoading) {\n    return <div>Loading...</div>\n  }\n\n  const user = data as User\n\n  return (\n    <div>\n      <label>{user.username}</label>\n      <br />\n\n      <label>{user.passwordHash}</label>\n      <br />\n    </div>\n  )\n}\n\nexport default DetailUser\n","import client from '../api'\nimport React from 'react'\nimport { useParams, useHistory } from 'react-router-dom'\nimport UserForm from './UserForm'\nimport { User } from '../types'\nimport { useQuery, useMutation, useQueryClient } from 'react-query'\n\nfunction UpdateUser() {\n  const { id } = useParams<{ id: string }>()\n  const queryClient = useQueryClient()\n  const history = useHistory()\n\n  const { data, isLoading } = useQuery<User>(['users', id], () =>\n    client.get(`/api/v1/users/${id}`).then((response) => response.data)\n  )\n\n  const updateUser = useMutation<User, any, User>(\n    (values: User) =>\n      client\n        .put(`/api/v1/users/${id}`, values)\n        .then((response) => response.data),\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries('users')\n      },\n    }\n  )\n\n  if (isLoading) {\n    return <div>Loading...</div>\n  }\n\n  const user = data as User\n  return (\n    <UserForm\n      user={user}\n      onSubmit={(values, { setSubmitting }) => {\n        updateUser.mutate(values)\n        setSubmitting?.(false)\n        history.push('/users')\n      }}\n    />\n  )\n}\n\nexport default UpdateUser\n","import React, { useState } from 'react'\nimport { Formik, Field, Form, FormikHelpers } from 'formik'\n\nimport { LoginValues } from '../types'\nimport client from '../api'\nimport { useHistory } from 'react-router-dom'\nimport { useQueryClient } from 'react-query'\n\nfunction Login() {\n  const [error, setError] = useState<string>('')\n  const history = useHistory()\n  const queryClient = useQueryClient()\n\n  const initialValues: LoginValues = {\n    username: '',\n    password: '',\n  }\n\n  const handleError = (\n    error: any,\n    { setSubmitting }: Partial<FormikHelpers<LoginValues>>\n  ) => {\n    if (error.response && error.response.data) {\n      const { error: message } = error.response.data\n      message && setError(message)\n    }\n    setSubmitting?.(false)\n  }\n\n  const handleSubmit = async (\n    values: LoginValues,\n    { setSubmitting }: FormikHelpers<LoginValues>\n  ) => {\n    try {\n      await client.post('/auth/login', values)\n      setSubmitting?.(false)\n      await queryClient.invalidateQueries('user')\n      history.push('/')\n    } catch (error) {\n      handleError(error, { setSubmitting })\n    }\n  }\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validate={() => {\n        return {}\n      }}\n      onSubmit={handleSubmit}\n    >\n      {({ isSubmitting }) => (\n        <Form>\n          <Field type='text' name='username' placeholder='Username' />\n          <Field type='password' name='password' placeholder='Password' />\n          {error && <div>{error}</div>}\n          <button type='submit' disabled={isSubmitting}>\n            Login\n          </button>\n        </Form>\n      )}\n    </Formik>\n  )\n}\n\nexport default Login\n","import React, { useState } from 'react'\nimport { Formik, Field, Form, FormikHelpers } from 'formik'\nimport { RegisterValues } from '../types'\nimport api from '../api'\n\nfunction Register() {\n  const [error, setError] = useState<string>('')\n\n  const initialValues: RegisterValues = {\n    username: '',\n    email: '',\n    password: '',\n    passwordConfirm: '',\n  }\n\n  const handleSubmit = async (\n    values: RegisterValues,\n    { setSubmitting }: FormikHelpers<RegisterValues>\n  ) => {\n    try {\n      await api.post('/auth/register', values)\n      setSubmitting?.(false)\n    } catch (error) {\n      if (error.response && error.response.data) {\n        const { error: message } = error.response.data\n        message && setError(message)\n      }\n      setSubmitting?.(false)\n    }\n  }\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validate={() => {\n        return {}\n      }}\n      onSubmit={handleSubmit}\n    >\n      {({ isSubmitting }) => (\n        <Form>\n          <Field type='text' name='username' placeholder='Username' />\n          <Field type='text' name='email' placeholder='Email' />\n          <Field type='password' name='password' placeholder='Password' />\n          <Field\n            type='password'\n            name='passwordConfirm'\n            placeholder='Confirm password'\n          />\n          {error && <div>{error}</div>}\n          <button type='submit' disabled={isSubmitting}>\n            Register\n          </button>\n        </Form>\n      )}\n    </Formik>\n  )\n}\n\nexport default Register\n","import React, { useEffect } from 'react'\n\nimport CreateCoffee from './coffees/CreateCoffee'\nimport ListCoffee from './coffees/ListCoffee'\nimport DetailCoffee from './coffees/DetailCoffee'\nimport UpdateCoffee from './coffees/UpdateCoffee'\n\nimport CreateFruit from './fruits/CreateFruit'\nimport ListFruit from './fruits/ListFruit'\nimport DetailFruit from './fruits/DetailFruit'\nimport UpdateFruit from './fruits/UpdateFruit'\n\nimport CreateIcecream from './icecreams/CreateIcecream'\nimport ListIcecream from './icecreams/ListIcecream'\nimport DetailIcecream from './icecreams/DetailIcecream'\nimport UpdateIcecream from './icecreams/UpdateIcecream'\n\nimport CreateUser from './users/CreateUser'\nimport ListUser from './users/ListUser'\nimport DetailUser from './users/DetailUser'\nimport UpdateUser from './users/UpdateUser'\n\nimport LoginForm from './auth/LoginForm'\nimport RegisterForm from './auth/RegisterForm'\n\nimport { Route, Switch, BrowserRouter as Router, Link } from 'react-router-dom'\n\nimport { useQuery } from 'react-query'\n\nimport client, { fetchCSRFToken, hasCSRFToken } from './api'\n\nfunction App() {\n  const { data: user } = useQuery('user', () => client.get('/auth/me'), {\n    retry: false,\n  })\n\n  useEffect(() => {\n    if (!hasCSRFToken()) fetchCSRFToken()\n  }, [])\n\n  return (\n    <Router>\n      <nav>\n        <ul className='flex'>\n          <li>\n            <Link to='/'>Home</Link>\n            <br />\n          </li>\n\n          <li className='ml-10'>\n            <Link to='/login'>Login</Link>\n            <br />\n            <Link to='/register'>Register</Link>\n            <br />\n          </li>\n\n          <li className='ml-10'>\n            <Link to='/coffees'>Coffees</Link>\n            <br />\n            <Link to='/coffees/create'>Create a Coffee</Link>\n            <br />\n          </li>\n\n          <li className='ml-10'>\n            <Link to='/fruits'>Fruits</Link>\n            <br />\n            <Link to='/fruits/create'>Create a Fruit</Link>\n            <br />\n          </li>\n\n          <li className='ml-10'>\n            <Link to='/icecreams'>Icecreams</Link>\n            <br />\n            <Link to='/icecreams/create'>Create a Icecream</Link>\n            <br />\n          </li>\n\n          <li className='ml-10'>\n            <Link to='/users'>Users</Link>\n            <br />\n            <Link to='/users/create'>Create a User</Link>\n            <br />\n          </li>\n        </ul>\n      </nav>\n      <main>\n        <Route path='/coffees'>\n          <h1>Coffees</h1>\n        </Route>\n\n        <Route path='/fruits'>\n          <h1>Fruits</h1>\n        </Route>\n\n        <Route path='/icecreams'>\n          <h1>Icecreams</h1>\n        </Route>\n\n        <Route path='/users'>\n          <h1>Users</h1>\n        </Route>\n\n        <Switch>\n          {/* Coffee routes */}\n          <Route path='/coffees/create' component={CreateCoffee} />\n          <Route path='/coffees/update/:id' component={UpdateCoffee} />\n          <Route path='/coffees/detail/:id' component={DetailCoffee} />\n          <Route path='/coffees' component={ListCoffee} />,{/* Fruit routes */}\n          <Route path='/fruits/create' component={CreateFruit} />\n          <Route path='/fruits/update/:id' component={UpdateFruit} />\n          <Route path='/fruits/detail/:id' component={DetailFruit} />\n          <Route path='/fruits' component={ListFruit} />,{/* Icecream routes */}\n          <Route path='/icecreams/create' component={CreateIcecream} />\n          <Route path='/icecreams/update/:id' component={UpdateIcecream} />\n          <Route path='/icecreams/detail/:id' component={DetailIcecream} />\n          <Route path='/icecreams' component={ListIcecream} />,\n          {/* User routes */}\n          <Route path='/users/create' component={CreateUser} />\n          <Route path='/users/update/:id' component={UpdateUser} />\n          <Route path='/users/detail/:id' component={DetailUser} />\n          <Route path='/users' component={ListUser} />\n          {/* auth routes */}\n          <Route path='/login' component={LoginForm} />\n          <Route path='/register' component={RegisterForm} />\n        </Switch>\n      </main>\n    </Router>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport { QueryClient, QueryClientProvider } from 'react-query'\n\nconst queryClient = new QueryClient()\n\nReactDOM.render(\n  <React.StrictMode>\n    <QueryClientProvider client={queryClient}>\n      <App />\n    </QueryClientProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}